<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.14 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC7515 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml">
<!ENTITY RFC7519 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-santesson-svt-jws-00" category="info" consensus="true">

  <front>
    <title>JWS Signature Validation Token</title>

    <author initials="S." surname="Santesson" fullname="Stefan Santesson">
      <organization abbrev="IDsec Solutions">IDsec Solutions AB</organization>
      <address>
        <postal>
          <street>Forskningsbyn Ideon</street>
          <city>Lund</city>
          <code>223 70</code>
          <country>SE</country>
        </postal>
        <email>sts@aaa-sec.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <postal>
          <street>516 Dranesville Road</street>
          <city>Herndon, VA</city>
          <code>20170</code>
          <country>US</country>
        </postal>
        <email>housley@vigilsec.com</email>
      </address>
    </author>

    <date year="2021" month="September" day="03"/>

    <area>Security</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a JSON Web Signature (JWS) profile for the Signature Validation Token defined in <xref target="SVT"/>.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">

<t>The “Signature Validation Token” specification <xref target="SVT"/> defines the basic token to support signature validation in a way that can significantly extend the lifetime of a signature.</t>

<t>This specification defines a profile for implementing SVT with a JWS signed payload according to <xref target="RFC7515"/>, and defines the following aspects of SVT usage:</t>

<t><list style="symbols">
  <t>How to include reference data related to JWS signatures in an SVT.</t>
  <t>How to add an SVT token to JWS signatures.</t>
</list></t>

<t>A JWS may have one or more signatures depending on its serialization format, signing the same payload data. A JWS either contains the data to be signed (enveloping) or may sign any externally associated payload data (detached).</t>

<t>To provide a generic solution for JWS, an SVT is added to each present signature as a JWS Unprotected Header. If a JWS includes multiple signatures, then each signature includes its own SVT.</t>

</section>
<section anchor="defs" title="Definitions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>The definitions in <xref target="SVT"/> and <xref target="RFC7515"/> apply also to this document.</t>

</section>
<section anchor="svt-in-jws" title="SVT in JWS">

<t>An SVT token MAY be added to any signature of a JWS to support validation of that signature. If more than one signature is present then each present SVT MUST provide information exclusively related to one associated signature and MUST NOT include information about any other signature in the JWS.</t>

<t>Each SVT is stored in its associated signature’s “svt” header as defined in <xref target="svt-header"/>.</t>

<section anchor="svt-header" title="“svt” Header Parameter">

<t>The “svt” (Signature Validation Token) Header Parameter is used to contain an array of SVT tokens to support validation of the associated signature. Each SVT token in the array has the format of a JWT as defined in <xref target="RFC7519"/> and is stored using its natural string representation without further wrapping or encoding.</t>

<t>The “svt” Header Parameter, when used, MUST be included as a JWS Unprotected Header.</t>

<t>Note: JWS Unprotected Header is not supported with JWS Compact Serialization. A consequence of adding an SVT token to a JWS is therefore that JWS JSON Serialization MUST be used, either in the form of general JWS JSON Serialization (for one or more signatures) or in the form of flattened JWS JSON Serialization (optionally used when only one signature is present in the JWS).</t>

</section>
<section anchor="multiple-svt-tokens" title="Multiple SVT in a signature">

<t>If a new SVT is stored in a signature which already contains a previously issued SVT, implementations can choose to either replace the existing SVT or to store the new SVT in addition to the existing SVT.</t>

<t>If a JWS signature already contains an array of SVTs and a new SVT is to be added, then the new SVT MUST be added to the array of SVT tokens in the existing “svt” Header Parameter.</t>

</section>
</section>
<section anchor="svt-claims" title="SVT Claims">

<section anchor="signature-reference-data" title="Signature Reference Data">

<t>The SVT Signature object MUST contain a “sig_ref” claim (SigReference object) with the following elements:</t>

<t><list style="symbols">
  <t>“sig_hash” – The hash over the associated signature value (the bytes of the base64url-decoded signature parameter).</t>
  <t>“sb_hash” – The hash over all bytes signed by the associated signature (the JWS Signing Input according to <xref target="RFC7515"/>).</t>
</list></t>

</section>
<section anchor="signed-data-reference" title="Signed Data Reference Data">

<t>The SVT Signature object MUST contain one instance of the “sig_data” claim (SignedData object) with the following elements:</t>

<t><list style="symbols">
  <t>“ref” – This parameter MUST hold one of the following thee possible values.  <list style="numbers">
      <t>The explicit string value “payload” if the signed JWS Payload is embedded in a “payload” member of the JWS.</t>
      <t>The explicit string value “detached” if the JWS signs detached payload data without explicit reference.</t>
      <t>A URI that can be used to identify or fetch the detached signed data. The means to determine the URI for the detached signed data is outside the scope of this specification.</t>
    </list></t>
  <t>“hash” – The hash over the JWS Payload data bytes (not its base64url-encoded string representation).</t>
</list></t>

</section>
<section anchor="signer-certificate-references" title="Signer Certificate References">

<t>The SVT Signature object MUST contain a “signer_cert_ref” claim (CertReference object). The “type” parameter of the “signer_cert_ref” claim MUST be either “chain” or “chain_hash”.</t>

<t><list style="symbols">
  <t>The “chain” type MUST be used when signature validation was performed using one or more certificates where some or all of the certificates in the chain are not present in the target signature.</t>
  <t>The “chain_hash” type MUST be used when signature validation was performed using one or more certificates where all of the certificates are present in the target signature JOSE header using the “x5c” Header Parameter.</t>
</list></t>

</section>
</section>
<section anchor="svt-jose-header" title="SVT JOSE Header">

<section anchor="svt-signing-key-reference" title="SVT Signing Key Reference">

<t>The SVT JOSE header must contain one of the following header parameters in accordance with <xref target="RFC7515"/>, for storing a reference to the public key used to verify the signature on the SVT:</t>

<t><list style="symbols">
  <t>“x5c” – Holds an X.509 certificate <xref target="RFC5280"/> or a chain of certificates. The certificate holding the public key that verifies the signature on the SVT MUST be the first certificate in the chain.</t>
  <t>“kid” – A key identifier holding the Base64 encoded hash value of the certificate that can verify the signature on the SVT. The hash algorithm MUST be the same hash algorithm used when signing the SVT as specified by the <spanx style="verb">alg</spanx> header parameter.</t>
</list></t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<section anchor="iana-header-params" title="Header Parameter Names Registration">

<t>This section registers the “svt” Header Parameter in the IANA “JSON Web Signature and Encryption Header Parameters” registry established by <xref target="RFC7515"/>.</t>

<section anchor="iana-header-params-reg" title="Registry Contents">

<t><list style="symbols">
  <t>Header Parameter Name: “svt”</t>
  <t>Header Parameter Description: Signature Validation Token</t>
  <t>Header Parameter Usage Location(s): JWS</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): <xref target="svt-header"/> of {this document}</t>
</list></t>

<t>NOTE to RFC editor: Please replace {this document} with its assigned RFC number.</t>

</section>
</section>
</section>
<section anchor="seccons" title="Security Considerations">

<t>The security considerations of <xref target="SVT"/> applies also to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC5280;
&RFC7515;
&RFC7519;
&RFC8174;
<reference anchor="SVT" >
  <front>
    <title>Signature Validation Token</title>
    <author initials="S." surname="Santesson" fullname="Stefan Santesson">
      <organization></organization>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization></organization>
    </author>
    <date year="2021" month="September"/>
  </front>
  <seriesInfo name="IETF" value="draft-santesson-svt-02"/>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
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
3ArNFLH75qu4/wJnP5QzBx0AAA==

-->

</rfc>

