<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.6.5 (Ruby 2.6.8) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5652 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC6931 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6931.xml">
<!ENTITY RFC7515 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml">
<!ENTITY RFC7518 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7518.xml">
<!ENTITY RFC7519 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
<!ENTITY RFC8610 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8610.xml">
]>


<rfc ipr="trust200902" docName="draft-santesson-svt-03" category="info" submissionType="independent" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title>Signature Validation Token</title>

    <author initials="S." surname="Santesson" fullname="Stefan Santesson">
      <organization abbrev="IDsec Solutions">IDsec Solutions AB</organization>
      <address>
        <postal>
          <street>Forskningsbyn Ideon</street>
          <city>Lund</city>
          <code>223 70</code>
          <country>SE</country>
        </postal>
        <email>sts@aaa-sec.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <postal>
          <street>516 Dranesville Road</street>
          <city>Herndon, VA</city>
          <code>20170</code>
          <country>US</country>
        </postal>
        <email>housley@vigilsec.com</email>
      </address>
    </author>

    <date year="2022" month="March" day="21"/>

    <area>Security</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Electronic signatures have a limited lifespan with respect to the time period that they
can be validated and determined to be authentic. The Signature Validation Token (SVT)
defined in this specification provides evidence that asserts the validity of an
electronic signature. The SVT is provided by a trusted authority, which asserts that
a particular signature was successfully validated according to defined procedures at
a certain time. Any future validation of that electronic signature can be satisfied by
validating the SVT without any need to also validate the original electronic signature or
the associated digital certificates. SVT supports electronic signatures in CMS, XML,
PDF and JSON documents.</t>



    </abstract>



  </front>

  <middle>


<section anchor="intro"><name>Introduction</name>

<t>Electronic signatures have a limited lifespan regarding when they can be validated
and determined to be authentic. Many factors make it more difficult to validate
electronic signatures over time. For example:</t>

<t><list style="symbols">
  <t>Trusted information about the validity of the certificate containing the signer's public key is not available.</t>
  <t>Trusted information about the date and time when the signature was actually created is not available.</t>
  <t>Algorithms used to create the electronic signature are no longer considered secure.</t>
  <t>Services necessary to validate the signature are no longer available.</t>
  <t>Supporting evidence such as CA certificates, OCSP responses, CRLs, or timestamps.</t>
</list></t>

<t>The challenges to validation of an electronic signature increases over time, and
eventually it is simply impossible to verify the signature with a sufficient level of
assurance.</t>

<t>Existing standards, such as the ETSI XAdES <xref target="XADES"/> profile for XML
signatures <xref target="XMLDSIG11"/>, ETSI PAdES <xref target="PADES"/> profile for PDF signatures
<xref target="ISOPDF2"/>, and ETSI CAdES <xref target="CADES"/> profile for CMS signatures
<xref target="RFC5652"/> can be used to prolong the lifetime of a signature by
storing data that supports validation of the electronic signature beyond
the lifetime of the certificate containing the signer's public key, which
is often referred to as the signing certificate.  The problem with this
approach is that the amount of information that must be stored along with
the electronic signature constantly grows over time.  The increasing
amount of information and signed objects that need to be validated in
order to verify the original electronic signature grows in complexity to
the point where validation of the electronic signature may become
infeasible.</t>

<t>The Signature Validation Token (SVT) defined in this specification takes a fundamentally
different approach to the problem by providing evidence by a trusted authority that
asserts the validity of an electronic signature. The SVT asserts that a particular
electronic signature was successfully validated  by a trusted authority according to
defined procedures at a certain date and time. Once the SVT is issued by a trusted
authority, any future validation of that electronic signature is satisfied by validating
the SVT, without any need to also validate the original electronic signature.</t>

<t>This approach drastically reduces the complexity of validation of older electronic
signatures for the simple reason that validating the SVT eliminates the need to
validate the many signed objects that would otherwise been needed to provide the
same level of assurance. The SVT can be signed with private keys and algorithms that
provide confidence for a considerable time period. In fact, multiple SVTs can be used
to offer greater assurance. For example, one SVT could be produced with a large RSA
private key, a second one with a strong elliptic curve, and a third one with a quantum
safe digital signature algorithm to protect against advances in computing power and
cryptanalytic capabilities. Further, the trusted authority can add additional SVTs
in the future using fresh private keys and signatures to extend the lifetime of the,
if necessary.</t>

</section>
<section anchor="defs"><name>Definitions</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document use the following terms:</t>

<t><list style="symbols">
  <t>Signed Data -- The data covered by a particular electronic signature. This is typically
equivalent to the signed content of a document, and it represents the data that the
signer intended to sign. In some cases, such as in some XML signatures, the signed data
can be the collection of several data fragments each referenced by the signature. In the
case of PDF, this is the data covered by the "ByteRange" parameter in the signature
dictionary.</t>
  <t>Signed Bytes -- These are the actual bytes of data that were hashed and signed by the
digital signature algorithm. In most cases, this is not the actual Signed Data, but a
collection of signature metadata that includes references (hash) of the Signed Data as
well as information about algorithms and other data bound to a signature. In XML, this
is the canonicalized SignedInfo element. In CMS and PDF signatures, this is the
DER-encoded SignedAttributes structure.</t>
</list></t>

<t>When these terms are used as defined in this section, they appear with a
capitalized first letter.</t>

</section>
<section anchor="svt"><name>Signature Validation Token</name>

<t>The Signature Validation Token (SVT) is created by a trusted service to capture
evidence of successful electronic signature verification, and then relying
parties can depend on the checking that has already taken place by the
trusted service.</t>

<section anchor="svt-function"><name>Signature Validation Token Function</name>

<t>The function of the SVT is to capture evidence of electronic signature
validity at one instance of secure signature validation process and to
use that evidence to eliminate the need to perform any repeated
cryptographic validation of the original electronic signature value, as
well as reliance on any hash values bound to that signature.  The SVT
achieves this by binding the following information to a specific
electronic signature:</t>

<t><list style="symbols">
  <t>A unique identification of the electronic signature.</t>
  <t>The data and metadata signed by the electronic signature.</t>
  <t>The signer's certificate that was validated as part of electronic signature verification.</t>
  <t>The certification path that was used to validate the signer's certificate.</t>
  <t>An assertion providing evidence of that the signature was verified, the date and time the verification was performed, the procedures used to verify the electronic signature, and the outcome of the verification.</t>
  <t>An assertion providing evidence of the date and time at which the signature is known to have existed, the procedures used to validate the date and time of existence, and the outcome of the validation.</t>
</list></t>

<t>Using an SVT is equivalent to validating a signed document in a system once, and then
using that document multiple times without subsequent revalidating the electronic
signature for each usage. Such procedures are common in systems where the document is
residing in a safe and trusted environment where it is protected against modification. The
SVT allows the safe and trusted environment to expand beyond a locally controlled
environment, and the SVT allows a greater period between original electronic signature
verification and subsequent usage.</t>

<t>Using the SVT, the electronic signature verification of a document can be take place
once using a reliable trusted service, and then any relying party that is able to
depend on the verification process already performed by the trusted service. The SVT
is therefore not only a valuable tool to extend the lifetime of a signed document, but
also avoids the need for careful integration between electronic signature verification
and document usage.</t>

</section>
<section anchor="svt-syntax"><name>Signature Validation Token Syntax</name>

<t>The SVT is carried in a JSON Web Token (JWT) as defined in <xref target="RFC7519"/>.</t>

<section anchor="svt-syntax-dt"><name>Data Types</name>

<t>The contents of claims in an SVT are specified using the following data types:</t>

<t><list style="symbols">
  <t>String -- JSON Data Type of string that contains an arbitrary case sensitive string value.</t>
  <t>Base64Binary -- JSON Data Type of string that contains of Base64 encoded byte array of binary data.</t>
  <t>StringOrURI -- JSON Data Type of string that contains an arbitrary string or an URI as defined in <xref target="RFC7519"/>, which REQUIRES a value containing the colon character (":") to be a URI.</t>
  <t>URI -- JSON Data Type of string that contains an URI as defined in <xref target="RFC7519"/>.</t>
  <t>Integer -- JSON Data Type of number that contains a 32-bit signed integer value (from -2^31 to 2^31-1).</t>
  <t>Long -- JSON Data Type of number that contains a 64-bit signed integer value (from -2^63 to 2^63-1).</t>
  <t>NumericDate -- JSON Data Type of number that contains a data as defined in <xref target="RFC7519"/>, which is the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.</t>
  <t>Boolean -- JSON Data Type of boolean that contains explicit value of true or false.</t>
  <t>Object&lt;Class&gt; -- A JSON object holding a claims object of a class defined in this specification (see <xref target="svt-syntax-claim"/>).</t>
  <t>Map&lt;Type&gt; -- A JSON object with name-value pairs where the value is an object of the specified Type in the notation. For example, Map&lt;String&gt; is a JSON object with name value pairs where all values are of type String.</t>
  <t>Array -- A JSON array of a specific data type as defined in this section. An array is expressed in this specification by square brackets. For example, [String] indicates an array of String values, and [Object&lt;DocHash&gt;] indicates an array of DocHash objects.</t>
  <t>Null -- A JSON null that represents an absent value. A claim with a null value is equivalent with an absent claim.</t>
</list></t>

</section>
<section anchor="svt-syntax-claim"><name>Signature Validation Token JWT Claims</name>

<t>The SVT MUST contain only JWT claims in the following list:</t>

<t><list style="symbols">
  <t>jti -- A String data type that is a "JWT ID" registered claim according to <xref target="RFC7519"/>. It is RECOMMENDED that the identifier holds a hexadecimal string representation of a 128-bit unsigned integer. A SVT MUST contain one "JWT ID" claim.</t>
  <t>iss  -- A StringOrURI data type that is an "Issuer" registered claim according to <xref target="RFC7519"/>, which is an arbitrary unique identifier of the SVT issuer. This value SHOULD have the value of an URI based on a domain owned by the issuer. A SVT MUST contain one "Issuer" claim.</t>
  <t>iat -- A NumericDate data type that is an "Issued At" registered claim according to <xref target="RFC7519"/>, which expresses the date and time when this SVT was issued. A SVT MUST contain one "Issued At" claim.</t>
  <t>aud -- A [StringOrURI] data type or a StringOrURI data type that is an "Audience" registered claim according to <xref target="RFC7519"/>. The audience claim is an array of one or more identifiers, identifying intended recipients of the SVT. Each identifier MAY identify a single entity, a group of entities or a common policy adopted by a group of entities. If only one value is provided it MAY be provided as a single StringOrURI data type value instead of as an array of values. Inclusion of the "Audience" claim in a SVT is OPTIONAL.</t>
  <t>exp -- A NumericDate data type that is an "Expiration Time" registered claim according to <xref target="RFC7519"/>, which expresses the date and time when services and responsibilities related to this SVT is no longer provided by the SVT issuer. The precise meaning of the expiration time claim is defined by local policies. See implementation note below. Inclusion of the "Expiration Time" claim in a SVT is OPTIONAL.</t>
  <t>sig_val_claims -- A Object&lt;SigValidation&gt; data type that contains signature validation claims for this SVT extending the standard registered JTW claims above. A SVT MUST contain one sig_val_claims claim.</t>
</list></t>

<t>Note: An SVT asserts that a particular validation process was undertaken at a stated
date and time. This fact never changes and never expires. However, some other aspects
of the SVT such as liability for false claims or service provision related to a specific
SVT may expire after a certain period of time, such as a service where an old SVT can be
upgraded to a new SVT signed with fresh keys and algorithms.</t>

</section>
<section anchor="sigvalidation-obj-class"><name>SigValidation Object Class</name>

<t>The sig_val_claims JWT claim uses the SigValidation object class. A SigValidation object
holds all custom claims, and a SigValidation object contains the following parameters:</t>

<t><list style="symbols">
  <t>ver -- A String data type representing the version. This parameter MUST be present, and the version in this specification indicated by the value "1.0".</t>
  <t>profile -- A StringOrURI data type representing the name of a profile that defines conventions followed for specific claims and any extension points used by the SVT issuer. This parameter MUST be present.</t>
  <t>hash_algo -- A URI data type that identifies the hash algorithm used to compute the hash values within the SVT. The URI identifier MUST be one defined in <xref target="RFC6931"/> or in the IANA registry defined by this specification. This parameter MUST be present.</t>
  <t>sig -- A [Object&lt;Signature&gt;] data type that gives information about validated electronic signatures as an array of Signature objects. If the SVT contains signature validation evidence for more than one signature, then each signature is represented by a separate Signature object. At least one Signature object MUST be present.</t>
  <t>ext -- A Map&lt;String&gt; data type that provides additional claims related to the SVT. Extension claims are added at the discretion of the SVT issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="signature-obj-class"><name>Signature Claims Object Class</name>

<t>The sig parameter in the SigValidation object class uses the Signature object
class. The Signature object contains claims related to signature validation
evidence for one signature, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>sig_ref -- A Object&lt;SigReference&gt; data type that contains reference information identifying the target signature. This parameter MUST be present.</t>
  <t>sig_data_ref -- A [Object&lt;SignedDataReference&gt;] data type that contains an array of references to Signed Data that was signed by the target electronic signature. At least one SignedDataReference object MUST be present.</t>
  <t>signer_cert_ref -- A Object&lt;CertReference&gt; data type that references the signer's certificate and optionally reference to a supporting certification path that was used to verify the target electronic signature. This parameter MUST be present.</t>
  <t>sig_val -- A [Object&lt;PolicyValidation&gt;] data type that contains an array of results of signature verification according to defined procedures. At least one PolicyValidation object MUST be present.</t>
  <t>time_val -- A [Object&lt;TimeValidation&gt;] data type that contains an array of time verification results that the target signature has existed at a specific date and time in the past. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext -- A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="sigreference-obj-class"><name>SigReference Claims Object Class</name>

<t>The sig_ref parameter in the Signature object class uses the SigReference object
class. The SigReference object provides information used to match the Signature
claims object to a specific target electronic signature and to verify the integrity
of the target signature value and Signed Bytes, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>id -- A String data type that contains an identifier assigned to the target signature. Inclusion of this parameter is OPTIONAL.</t>
  <t>sig_hash -- A Base64Binary data type that contains a hash value of the target electronic signature value. This parameter MUST be present.</t>
  <t>sb_hash -- A Base64Binary data type that contains a hash value of the Signed Bytes of the target electronic signature. This parameter MUST be present.</t>
</list></t>

</section>
<section anchor="signeddatareference-obj-class"><name>SignedDataReference Claims Object Class</name>

<t>The sig_data_ref parameter in the Signature object class uses the SignedDataReference object
class. The SignedDataReference object provides information used to verify the target electronic
signature references to Signed Data as well as to verify the integrity of all data that
is signed by the target signature, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>ref -- A String data type that contains a reference identifier for the data or data fragment covered by the target electronic signature. This parameter MUST be present.</t>
  <t>hash -- A Base64Binary data type that contains the hash value for the data covered by the target electronic signature. This parameter MUST be present.</t>
</list></t>

</section>
<section anchor="policyval-obj-class"><name>PolicyValidation Claims Object Class</name>

<t>The sig_val parameter in the Signature object class uses the PolicyValidation object
class. The PolicyValidation object provides information about the result of a validation
process according to a spefific policy, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>pol -- A StringOrURI data type that contains the identifier of the policy governing the electronic signature verification process. This parameter MUST be present.</t>
  <t>res -- A String data type that contains the result of the electronic signature verification process. The value MUST be one of "PASSED", "FAILED" or "INDETERMINATE" as defined by <xref target="ETSI319102-1"/>. This parameter MUST be present.</t>
  <t>msg -- A String data type that contains a message describing the result. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext -- A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="timever-obj-class"><name>TimeValidation Claims Object Class</name>

<t>The time_val parameter in the Signature object class uses the TimeValidation object
class. The TimeValidation claims object provides information about the result of
validating time evidence asserting that the target signature existed at a particular
date and time in the past, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>time -- A NumericDate data type that contains the verified time. This parameter MUST be present.</t>
  <t>type -- A StringOrURI data type that contains an identifier of the type of evidence of time. This parameter MUST be present.</t>
  <t>iss -- A StringOrURI data type that contains an identifier of the entity that issued the evidence of time. This parameter MUST be present.</t>
  <t>id -- A String data type that contains an unique identifier assigned to the evidence of time.  Inclusion of this parameter is OPTIONAL.</t>
  <t>val -- A [Object&lt;PolicyValidation&gt;] data type that contains an array of results of the time evidence validation according to defined validation procedures. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext -- A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="certref-obj-class"><name>CertReference Claims Object Class</name>

<t>The signer_cert_ref parameter in the Signature object class uses the CertReference object
class. The CertReference object references a single X.509 certificate or a X.509
certification path, either by providing the certificate data or by providing hash
references for certificates that can be located in the target electronic signature, and
it contains the following parameters:</t>

<t><list style="symbols">
  <t>type -- A StringOrURI data type that contains an identifier of the type of reference. The type identifier MUST be one of the identifiers defined below, an identifier specified by the selected profile, or a URI identifier. This parameter MUST be present.</t>
  <t>ref -- A [String] data type that contains an array of string parameters according to conventions defined by the type identifier. At least one parameter MUST be present.</t>
</list></t>

<t>The following type identifiers are defined:</t>

<t><list style="symbols">
  <t>chain -- The ref contains an array of Base64 encoded X.509 certificates <xref target="RFC5280"/>. The certificates MUST be provided in the order starting with the end entity certificate. Any following certificate must be able to validate the signature on the previous certificate in the array.</t>
  <t>chain_hash -- The ref contains an array of one or more Base64 encoded hash values where each hash value is a hash over a X.509 certificate <xref target="RFC5280"/> used to validate the signature.  The certificates MUST be provided in the order starting with the end entity certificate.  Any following certificate must be able to validate the signature on the previous certificate in the array. This option MUST NOT be used unless all hashed certificates are present in the target electronic signature.</t>
</list></t>

<t>Note: All certificates referenced using the identifiers above are X.509 certificates.
Profiles of this specification MAY define alternative types of public key containers;
however, a major function of these referenced certificates is not just to reference
the public key, but also to provide the subject name of the signer. It is therefore
important for the full function of an SVT that the referenced public key container also
provides the means to identify of the signer.</t>

</section>
<section anchor="svt-jose-header"><name>SVT JOSE Header</name>

<t>The SVT JWT MUST contain the following JOSE header parameters in accordance with
Section 5 of <xref target="RFC7519"/>:</t>

<t><list style="symbols">
  <t>typ -- This parameter MUST have the string value "JWT" (upper case).</t>
  <t>alg -- This parameter identifies the algorithm used to sign the SVT JWT. The algorithm identifier MUST be specified in <xref target="RFC7518"/> or the IANA JSON Web Signature and Encryption Algorithms Registry [ add a ref ]. The specified signature hash algorithm MUST be identical to the hash algorithm specified in the hash_algo parameter of the SigValidation object within the sig_val_claims claim.</t>
</list></t>

<t>The SVT header MUST contain a public key or a reference to a public key used to verify the signature on the SVT in accordance with <xref target="RFC7515"/>. Each profile, as discussed in <xref target="profiles"/>, MUST define the requirements for how the key or key reference is included in the header.</t>

</section>
</section>
</section>
<section anchor="profiles"><name>Profiles</name>

<t>Each signed document and signature type will have to define the precise content and
use of several claims in the SVT.</t>

<t>Each profile MUST as a minimum define:</t>

<t><list style="symbols">
  <t>The identifier of the profile.</t>
  <t>How to reference the Signed Data content of the signed document.</t>
  <t>How to reference to the target electronic signature and the Signed Bytes of the signature.</t>
  <t>How to reference certificates supporting each electronic siganture.</t>
  <t>How to include public keys or references to public keys in the SVT.</t>
  <t>Whether each electronic signature is supported by a single SVT, or whether one SVT may support multiple electronic signatures of the same document.</t>
</list></t>

<t>A profile MAY also define:</t>

<t><list style="symbols">
  <t>Explicit information on how to perform signature validation based on an SVT.</t>
  <t>How to attach an SVT to an electronic signature or signed document.</t>
</list></t>

</section>
<section anchor="signature-verification-with-a-svt"><name>Signature Verification with a SVT</name>

<t>Signature verification based on an a SVT MUST follow these steps:</t>

<t><list style="numbers">
  <t>Locate all available SVTs available for the signed document that are relevant for the target electronic signature.</t>
  <t>Select the most recent SVT that can be successfully validated and meets the requirement of the relying party.</t>
  <t>Verify the integrity of the signature and the Signed Bytes of the target electronic signature using the sig_ref claim.</t>
  <t>Verify that the Signed Data reference in the original electronic signature matches the reference values in the sig_data_ref claim.</t>
  <t>Verify the integrity of referenced Signed Data using provided hash values in the sig_data_ref claim.</t>
  <t>Obtain the verified certificates supporting the asserted electronic signature verification through the signer_cert_ref claim.</t>
  <t>Verify that signature validation policy results satisfy the requirements of the relying party.</t>
  <t>Verify that verified time results satisfy the context for the use of the signed document.</t>
</list></t>

<t>After successfully performing these steps, signature validity is established as well as
the trusted signer certificate binding the identity of the signer to the electronic
signature.</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<section anchor="claim-names-reg"><name>Claim Names Registration</name>

<t>This section registers the "sig_val_claims" claim name in the IANA "JSON Web Token Claims" registry established by Section 10.1 in <xref target="RFC7519"/>.</t>

<section anchor="clname-reg-contents"><name>Registry Contents</name>

<t><list style="symbols">
  <t>Claim Name: "sig_val_claims"</t>
  <t>Claim Description: Signature Validation Token</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): <xref target="sigvalidation-obj-class"/> of {this document}</t>
</list></t>

<t>NOTE to RFC editor: Please replace {this document} with its assigned RFC number.</t>

</section>
</section>
</section>
<section anchor="seccons"><name>Security Considerations</name>

<section anchor="seccon-lvl-of-reliance"><name>Level of reliance</name>

<t>An SVT allows a signature verifier to still validate the original signature using
the original signature data and to use the information in the SVT selectively to
either just confirm the validity and integrity of the original data, such as confirming the integrity of signed data or the validity of the signer's certificate etc.</t>

<t>Another way to use an SVT is to completely rely on the validation conclusion provided
by the SVT and to omit re-validation of the original signature value and original
certificate status checking data.</t>

<t>This choice is a decision made by the verifier according to its own policy and risk assessment.</t>

<t>However, even when relying on the SVT validation conclusion of an SVT it is vital to still verify that
the present SVT is correctly associated with the document and signature that is being validated by
validating the hashed reference data in the SVT of the signature, signing certificate chain,
signed data and the signed bytes.</t>

</section>
<section anchor="seccon-aging-algos"><name>Aging algorithms</name>

<t>Even if the SVT provides protection against algorithms becoming weakened or broken over time, this protection is only valid for as long as the algorithms used to sign the SVT are still considered secure. It is advisable to re-issue SVT in cases where an algorithm protecting the SVT is getting close to its end of life.</t>

<t>One way to increase the resistance of algorithms becoming insecure, is to issue multiple SVT for the same signature with different algorithms and key lengths where one algorithm could still be secure even if the corresponding algorithm used in the alternative SVT is broken.</t>

</section>
</section>


  </middle>

  <back>


    <references title='Normative References'>

&RFC2119;
&RFC8174;
&RFC5280;
&RFC5652;
&RFC6931;
&RFC7515;
&RFC7518;
&RFC7519;
<reference anchor="ETSI319102-1" >
  <front>
    <title>ETSI - Electronic Signatures and Infrastructures (ESI); Procedures for Creation and Validation of AdES Digital Signatures; Part 1: Creation and Validation</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="May"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 102-1 v1.1.1"/>
</reference>
<reference anchor="XMLDSIG11" >
  <front>
    <title>XML Signature Syntax and Processing Version 1.1</title>
    <author initials="D." surname="Eastlake" fullname="Donald Eastlake">
      <organization></organization>
    </author>
    <author initials="J." surname="Reagle" fullname="Joseph Reagle">
      <organization></organization>
    </author>
    <author initials="D." surname="Solo" fullname="David Solo">
      <organization></organization>
    </author>
    <author initials="F." surname="Hirsch" fullname="Frederick Hirsch">
      <organization></organization>
    </author>
    <author initials="M." surname="Nystrom" fullname="Magnus Nystrom">
      <organization></organization>
    </author>
    <author initials="T." surname="Roessler" fullname="Thomas Roessler">
      <organization></organization>
    </author>
    <author initials="K." surname="Yiu" fullname="Kelvin Yiu">
      <organization></organization>
    </author>
    <date year="2013" month="April" day="11"/>
  </front>
  <seriesInfo name="W3C" value="Proposed Recommendation"/>
</reference>
<reference anchor="ISOPDF2" >
  <front>
    <title>Document management -- Portable document format -- Part 2: PDF 2.0</title>
    <author >
      <organization>ISO</organization>
    </author>
    <date year="2017" month="July"/>
  </front>
  <seriesInfo name="ISO" value="32000-2"/>
</reference>
<reference anchor="XADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); XAdES digital signatures; Part 1: Building blocks and XAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 132-1 v1.1.1"/>
</reference>
<reference anchor="PADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); PAdES digital signatures; Part 1: Building blocks and PAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 142-1 v1.1.1"/>
</reference>
<reference anchor="CADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); CAdES digital signatures; Part 1: Building blocks and CAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 122-1 v1.1.1"/>
</reference>


    </references>

    <references title='Informative References'>

&RFC8610;


    </references>


<section anchor="appendix-schemas"><name>Appendix: Schemas</name>

<section anchor="concise-data-definition-language-cddl"><name>Concise Data Definition Language (CDDL)</name>

<t>The following informative CDDL <xref target="RFC8610"/> express the structure of an SVT token:</t>

<figure><artwork><![CDATA[
svt = {
  jti: text
  iss: text
  iat: uint
  ? aud: text / [* text]
  ? exp: uint
  sig_val_claims: SigValClaims
}

SigValClaims = {
  ver: text
  profile: text
  hash_algo: text
  sig: [+ Signature]
  ? ext: Extension
}

Signature = {
  sig_ref: SigReference
  sig_data_ref: [+ SignedDataReference]
  signer_cert_ref: CertReference
  sig_val: [+ PolicyValidation]
  ? time_val: [* TimeValidation]
  ? ext: Extension
}

SigReference = {
  ? id: text / null
  sig_hash: binary-value
  sb_hash: binary-value
}

SignedDataReference = {
  ref: text
  hash: binary-value
}


CertReference = {
  type: "chain" / "chain_hash"
  ref: [+ text]
}

PolicyValidation = {
  pol: text
  res: "PASSED" / "FAILED" / "INDETERMINATE"
  ? msg: text / null
  ? ext: Extension
}

TimeValidation = {
  "time": uint
  type: text
  iss: text
  ? id: text / null
  ? val: [* PolicyValidation]
  ? ext: Extension
}


Extension = {
  + text => text
} / null

binary-value = text             ; base64 classic with padding
]]></artwork></figure>

</section>
<section anchor="json-schema"><name>JSON Schema</name>

<t>The following informative JSON schema describes the syntax of the SVT token payload.</t>

<figure><artwork><![CDATA[
{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "Signature Validation Token JSON Schema",
    "description": "Schema defining the payload format for SVT",
    "type": "object",
    "required": [
        "jti",
        "iss",
        "iat",
        "sig_val_claims"
    ],
    "properties": {
        "jti": {
            "description": "JWT ID",
            "type": "string"
        },
        "iss": {
            "description": "Issuer",
            "type": "string"
        },
        "iat": {
            "description": "Issued At",
            "type": "integer"
        },
        "aud": {
            "description": "Audience",
            "type": [
                "string",
                "array"
            ],
            "items": {"type": "string"}
        },
        "exp": {
            "description": "Expiration time (seconds since epoch)",
            "type": "integer"
        },
        "sig_val_claims": {
            "description": "Signature validation claims",
            "type": "object",
            "required": [
                "ver",
                "profile",
                "hash_algo",
                "sig"
            ],
            "properties": {
                "ver": {
                    "description": "Version",
                    "type": "string"
                },
                "profile": {
                    "description": "Implementation profile",
                    "type": "string"
                },
                "hash_algo": {
                    "description": "Hash algorithm URI",
                    "type": "string"
                },
                "sig": {
                    "description": "Validated signatures",
                    "type": "array",
                    "items": {
                        "$ref": "#/$def/Signature"
                    },
                    "minItems": 1
                },
                "ext": {
                    "description": "Extension map",
                    "$ref": "#/$def/Extension"
                }
            },
            "additionalProperties": false
        }
    },
"additionalProperties": false,
"$def": {
         "Signature":{
             "type": "object",
             "required": [
                 "sig_ref",
                 "sig_data_ref",
                 "signer_cert_ref",
                 "sig_val"
             ],
             "properties": {
                 "sig_ref": {
                     "description": "Signature Reference",
                     "$ref": "#/$def/SigReference"
                 },
                 "sig_data_ref": {
                     "description": "Signed data array",
                     "type": "array",
                     "items": {
                         "$ref" : "#/$def/SignedDataReference"
                     },
                     "minItems": 1
                 },
                 "signer_cert_ref": {
                     "description": "Signer certificate reference",
                     "$ref": "#/$def/CertReference"
                 },
                 "sig_val": {
                     "description": "Signature validation results",
                     "type": "array",
                     "items": {
                         "$ref": "#/$def/PolicyValidation"
                     },
                     "minItems": 1
                 },
                 "time_val": {
                     "description": "Time validations",
                     "type": "array",
                     "items": {
                         "$ref": "#/$def/TimeValidation"
                     }
                 },
                "ext": {
                    "description": "Extension map",
                    "$ref": "#/$def/Extension"
                }
             },
             "additionalProperties": false
         },
         "SigReference":{
             "type": "object",
             "required": [
                 "sig_hash",
                 "sb_hash"
             ],
             "properties": {
                 "sig_hash": {
                     "description": "Hash of the signature value",
                     "type": "string",
                     "format": "base64"
                 },
                 "sb_hash": {
                     "description": "Hash of the Signed Bytes",
                     "type": "string",
                     "format": "base64"
                 },
                 "id": {
                     "description": "Signature ID reference",
                     "type": ["string","null"]
                 }
             },
            "additionalProperties": false
         },
         "SignedDataReference": {
             "type": "object",
             "required": [
                 "ref",
                 "hash"
             ],
             "properties": {
                 "ref": {
                     "description": "Reference to the signed data",
                     "type": "string"
                 },
                 "hash": {
                     "description": "Signed data hash",
                     "type": "string",
                     "format": "base64"
                 }
             },
            "additionalProperties": false
         },
         "CertReference":{
             "type": "object",
             "required": [
                 "type",
                 "ref"
             ],
             "properties": {
                 "type": {
                     "description": "Type of certificate reference",
                     "type": "string",
                     "enum": ["chain","chain_hash"]
                 },
                 "ref": {
                     "description": "Certificate reference data",
                     "type": "array",
                     "items": {
                         "type": "string",
                         "format": "base64"
                     },
                     "minItems": 1
                 }
             },
            "additionalProperties": false
         },
         "PolicyValidation":{
             "type": "object",
             "required": [
                 "pol",
                 "res"
             ],
             "properties": {
                 "pol": {
                     "description": "Policy identifier",
                     "type": "string"
                 },
                 "res": {
                     "description": "Signature validation result",
                     "type": "string",
                     "enum": ["PASSED","FAILED","INDETERMINATE"]
                 },
                 "msg": {
                     "description": "Message",
                     "type": ["string","null"]
                 },
                 "ext": {
                    "description": "Extension map",
                    "$ref": "#/$def/Extension"
                }
             },
            "additionalProperties": false
         },
         "TimeValidation":{
             "type": "object",
             "required": [
                 "time",
                 "type",
                 "iss"
             ],
             "properties": {
                 "time": {
                     "description": "Verified time",
                     "type": "integer"
                 },
                 "type": {
                     "description": "Type of time validation proof",
                     "type": "string"
                 },
                 "iss": {
                     "description": "Issuer of the time proof",
                     "type": "string"
                 },
                 "id": {
                     "description": "Tiem evidence identifier",
                     "type": ["string","null"]

                 },
                 "val": {
                     "description": "Validation result",
                     "type": "array",
                     "items": {
                         "$ref": "#/$def/PolicyValidation"
                     }
                 },
                 "ext": {
                    "description": "Extension map",
                    "$ref": "#/$def/Extension"
                }
             },
            "additionalProperties": false
         },
         "Extension": {
           "description": "Extension map",
           "type": ["object","null"],
           "required": [],
           "additionalProperties": {
               "type": "string"
           }
         }
     }
}
]]></artwork></figure>

</section>
</section>
<section anchor="appendix-examples"><name>Appendix: Examples</name>

<t>The following example illustrates a basic SVT according to this specification
issued for a signed PDF document.</t>

<t>Note: Line breaks in the decoded example are inserted for readablilty. Line
breaks are not allowed in valid JSON data.</t>

<t>Signature validation token JWT:</t>

<figure><artwork><![CDATA[
eyJraWQiOiJPZW5JKzQzNEpoYnZmRG50ZlZcLzhyT3hHN0ZrdnlqYUtWSmFWcUlG
QlhvaFZoQWU1Zks4YW5vdjFTNjg4cjdLYmFsK2Z2cGFIMWo4aWJnNTJRQnkxUFE9
PSIsInR5cCI6IkpXVCIsImFsZyI6IlJTNTEyIn0.eyJhdWQiOiJodHRwOlwvXC9l
eGFtcGxlLmNvbVwvYXVkaWVuY2UxIiwiaXNzIjoiaHR0cHM6XC9cL3N3ZWRlbmNv
bm5lY3Quc2VcL3ZhbGlkYXRvciIsImlhdCI6MTYwMzQ1ODQyMSwianRpIjoiNGQx
Mzk2ZjFmZjcyOGY0MGQ1MjQwM2I2MWM1NzQ0ODYiLCJzaWdfdmFsX2NsYWltcyI6
eyJzaWciOlt7ImV4dCI6bnVsbCwic2lnX3ZhbCI6W3sibXNnIjoiT0siLCJleHQi
Om51bGwsInJlcyI6IlBBU1NFRCIsInBvbCI6Imh0dHA6XC9cL2lkLnN3ZWRlbmNv
bm5lY3Quc2VcL3N2dFwvc2lndmFsLXBvbGljeVwvdHMtcGtpeFwvMDEifV0sInNp
Z19yZWYiOnsic2lnX2hhc2giOiJ5Y2VQVkxJemRjcEs5N0lZT2hGSWYxbnk3OUht
SUNiU1Z6SWVaTmJpem83ckdJd0hOTjB6WElTeUtHakN2bm9uT2FRR2ZMXC9QM3ZE
dEI4OHlLU1dlWGc9PSIsImlkIjoiaWQtNzM5ODljNmZjMDYzNjM2YWI1ZTc1M2Yx
MGY3NTc0NjciLCJzYl9oYXNoIjoiQm9QVjRXQ0E5c0FJYWhqSzFIYWpmRnhpK0F6
QzRKR1R1ZjM5VzNaV2pjekRDVVJ4ZGM5WWV0ZUh0Y3hHVmVnZ3B4SEo3NVwvY1E3
SE4xZERkbGl5SXdnPT0ifSwic2lnbmVyX2NlcnRfcmVmIjp7InJlZiI6WyIxK2Fh
SmV0ZzdyZWxFUmxVRFlFaVU0WklaaFQ0UlV2aUlRWnVLN28xR0ZLYVRQUTZ5K2t4
XC9QTnREcnB1cVE2WGZya0g5d1lESzRleTB5NFdyTkVybnc9PSIsImg0UER4YjVa
S214MWVUU3F2VnZZRzhnMzNzMDVKendCK05nRUhGVTRnYzl0cUcwa2dIa2Y2VzNv
THprVHd3dXJJaDZZOUFhZlpZcWMyelAycEUycDRRPT0iLCJEZDJDNXNCMElPUWVN
Vm5FQmtNNVE5Vzk2bUJITnd3YTJ0elhNcytMd3VZY09VdlBrcnlHUjBhUEc4Tzlu
SVAzbGJ3NktqUTFoRG1SazZ6Qzh4MmpkZz09Il0sInR5cGUiOiJjaGFpbl9oYXNo
In0sInNpZ19kYXRhX3JlZiI6W3sicmVmIjoiIiwiaGFzaCI6IkZjR3BPT2Y4aWxj
UHQyMUdEZDJjR25MR0R4UlM1ajdzdk00YXBwMkg0MWRERUxtMkN6Y2VUWTAybmRl
SmZXamludG1RMzc2SWxYVE9BcjMxeXpZenNnPT0ifSx7InJlZiI6IiN4YWRlcy0x
MWExNTVkOTJiZjU1Nzc0NjEzYmI3YjY2MTQ3N2NmZCIsImhhc2giOiJLUmtnYlo2
UFwvbmhVNjNJTWswR2lVZlVcL0RUd3ZlWWl0ZVFrd0dlSnFDNUJ6VE5WOGJRYnBl
ZFRUdVdKUHhxdkowUlk4NGh3bTdlWVwvZzBIckFPZWdLdz09In1dLCJ0aW1lX3Zh
bCI6W119XSwiZXh0IjpudWxsLCJ2ZXIiOiIxLjAiLCJwcm9maWxlIjoiWE1MIiwi
aGFzaF9hbGdvIjoiaHR0cDpcL1wvd3d3LnczLm9yZ1wvMjAwMVwvMDRcL3htbGVu
YyNzaGE1MTIifX0.TdHCoIUSZj2zMINKg7E44-8VE_mJq6TG1OoPwnYSs_hyUbuX
mrLJpuk8GR5YrndeOucPUYAwPxHt_f68JIQyFTi0agO9VJjn1R7Pj3Jt6WG9pYVN
n5LH-D1maxD11ZxxbcYeHbsstd2Sy2uMa3BdpsstGdPymSmc6GxY5uJoL0-5vwo_
3l-4Bb3LCTiuxYPcmztKIbDy2hEgJ3Hx1K4HF0SHgn3InpqBev3hm2SLw3hH5BCM
rywBAhHYE6OGE0aOJ6ktA5UP0jIIHfaw9i1wIiJtHTaGuvtyWSLk5cshmun9Hkdk
kRTA75bzuq0Iyd0qh070rA8Gje-s4Tw4xzttgKx1KSkvy8n5FqvzWdsZvclCG2mY
Y9rMxh_7607NXcxajAP4yDOoKNs5nm937ULe0vCN8a7WTrFuiaGjry7HhzRM4C5A
qxbDOBXPLyoMr4qn4LRJCHxOeLZ6o3ugvDOOWsyjk3eliyBwDu8qJH7UmyicLxDc
Cr0hUK_kvREqjD2Z
]]></artwork></figure>

<t>Decoded JWT Header:</t>

<figure><artwork><![CDATA[
{
  "kid":"OenI+434JhbvfDntfV\/8rOxG7FkvyjaKVJaVqIFBXohVhAe5fK8anov
         1S688r7Kbal+fvpaH1j8ibg52QBy1PQ==",
  "typ":"JWT",
  "alg":"RS512"
}
]]></artwork></figure>

<t>Decoded JWT Claims:</t>

<figure><artwork><![CDATA[
{
  "aud" : "http://example.com/audience1",
  "iss" : "https://swedenconnect.se/validator",
  "iat" : 1603458421,
  "jti" : "4d1396f1ff728f40d52403b61c574486",
  "sig_val_claims" : {
    "sig" : [ {
      "ext" : null,
      "sig_val" : [ {
        "msg" : "OK",
        "ext" : null,
        "res" : "PASSED",
        "pol" : "http://id.swedenconnect.se/svt/sigval-policy/
                 ts-pkix/01"
      } ],
      "sig_ref" : {
        "sig_hash" : "ycePVLIzdcpK97IYOhFIf1ny79HmICbSVzIeZNbizo7rGIw
                      HNN0zXISyKGjCvnonOaQGfL/P3vDtB88yKSWeXg==",
        "id" : "id-73989c6fc063636ab5e753f10f757467",
        "sb_hash" : "BoPV4WCA9sAIahjK1HajfFxi+AzC4JGTuf39W3ZWjczDCURx
                     dc9YeteHtcxGVeggpxHJ75/cQ7HN1dDdliyIwg=="
      },
      "signer_cert_ref" : {
        "ref" : [ "1+aaJetg7relERlUDYEiU4ZIZhT4RUviIQZuK7o1GFKaTPQ6y+
                   kx/PNtDrpuqQ6XfrkH9wYDK4ey0y4WrNErnw==",
                  "h4PDxb5ZKmx1eTSqvVvYG8g33s05JzwB+NgEHFU4gc9tqG0kgH
                   kf6W3oLzkTwwurIh6Y9AafZYqc2zP2pE2p4Q==",
                  "Dd2C5sB0IOQeMVnEBkM5Q9W96mBHNwwa2tzXMs+LwuYcOUvPkr
                   yGR0aPG8O9nIP3lbw6KjQ1hDmRk6zC8x2jdg==" ],
        "type" : "chain_hash"
      },
      "sig_data_ref" : [ {
        "ref" : "",
        "hash" : "FcGpOOf8ilcPt21GDd2cGnLGDxRS5j7svM4app2H41dDELm2Czc
                  eTY02ndeJfWjintmQ376IlXTOAr31yzYzsg=="
      }, {
        "ref" : "#xades-11a155d92bf55774613bb7b661477cfd",
        "hash" : "KRkgbZ6P/nhU63IMk0GiUfU/DTwveYiteQkwGeJqC5BzTNV8bQb
                  pedTTuWJPxqvJ0RY84hwm7eY/g0HrAOegKw=="
      } ],
      "time_val" : [ ]
    } ],
    "ext" : null,
    "ver" : "1.0",
    "profile" : "XML",
    "hash_algo" : "http://www.w3.org/2001/04/xmlenc#sha512"
  }
}
]]></artwork></figure>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAKDPWIAA+19aXfiyJbgd/0KHVefnqop28nqrc6bHttgjG2wzWqoV1NH
SAIEQiIlsebJ/u1z740IKSQEaWfle6/nTGctCVoi7r7FjeDk5EQJrMA2r9Sm
NXK0YOGZakezLUMLLNdRW+7UdBTD1R1tBs8YnjYMTnzNCUzfd50TfxmcZPIK
PAw3c5lcDr6d5LKKDhdGrre5Ui1n6Cr+YjCzfB8GbG3mJl40zLkJ/3MCRbHm
3pUaeAs/yGUyl5mconmmBuCY+sKzgo0yNTcr1zOu1CrM6jlmcFJCKBTFDzTH
+FOzXQeGdFxlbl2pvweufqz6rhd45tCHT5sZfvhDUbRFMHa9K0U9UVT4Yzk+
zHGqNgUudJVh2QzMoeYkbrneCEAo+aauNl17gdTx1esbuqcNBp653LlN93yA
xAyu1DvX86eO5Yz8wcZRq4bJx9UBxyv1aeEY7KtrAARHuVxePc8c8UsLJ0Ba
Nsv03Zxpln0FA/v/W9O0E5jyVHdnSgyzxql67y5829xIeDUWvh+7TDh1rJFl
h+Q+Vp+ebmNIxe/HcCpmz1RghmP6S8u2TbXhaoaE1D2wy3CdY7VzLeGWy2TP
M3HE2k0ZsTGD8H8vceIQO8f1ZiCTSxNYqDbubnPZ7CX/eJE9L/CPxdxFRnw8
K+b4x7PLfJZ/PC9mi9HHi+gjDVZuNav57GU2kzuhF1SVK8cR3lFP1LJt6oHn
OpYe6YuvghyCdA49DQiz0Nm1n8vN6i+/qS+eq5sGXRm6nnoLsk2Kha9IeuYO
1Wuj3FRLgHOg2dLgMITmBWr2at+7TEhC8VZDxiLI9F2oZ/bsJFNkDDQ9y/RR
N8UbhOARIlpXgQIqkUBdZk/hH5zhrfZUalYr2QRZ4LJkOJobJ9DWBB/hDSrv
jNSO6aHqq3ykJKwn/G8uuaVTtQx0tLWpGd5g4ltyHc02kncTrz+cqg1TG9nJ
lx9c35yP4/d2ZwbVdZOzakvLkG8k3roDTbM8Xx8n3rvzTAOorE/jtxNv107V
+gakBiQ8/npNGzkLP3Ez8XILcHWByLbpJd5ujd2Z5ifvJl5/PFV71iLx5qNp
Ly0nvBGKTv4kUzjJZvdJTzd/i8IDXJ8DoQ2gMyjtDEx8KKLV5vNL6S4XF5+S
qy/gqUCdaY42MunjyYn6AvZbG4BBMcT9IWk/3UNtyF2pMJiaO83slX6YL47B
+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
A1vR7WBzSgMofACN/9Sjxg+OhwFZSyL1VvCG19TwJhC/0MQbyczNg6d1X61n
6+Gl3y0+PG5ft/Xy3O05/VmjUsz07b7+tB1vWvnxfT3T9wzH/txrB93m7K6r
t+2K8mqPl9pd333ttrP9qV/odYtLY3LXqk9GBX1iPPVmd/5jrp/TK3fVWtct
aN0Hp956aLw603X7rnypvDSrftVpFPXb6ll1On/r3MJ3eKm/ge/2Q6veKm+q
TuYUIB0bDFLXuG+snu3V8u320lbMyl2gV9b206y+HHRWy95bZ6p1O4terr2u
WitLe6tvqxPX0u4bGf2+dgYv6U/5er7fbdgDeEcZzIp2L/+60HMduNEfDyr2
tPfWWOoWQmKPDYCs1uqtatvX7HPpdVNrwqBOY46D1iuva6W2neb6k7tZf6Jv
niu9TK3ymq1NXle1XDVX69ay9e1r5rnUs55uH7Za1xgagN5bru73unagA5rI
BbihW892cF6ddQo448Dp+IPblaXnbOcNoYJr3bxvDd7qDs7cyvg4oG3ev1rK
86yYHVRWQMgHWyfC3dy0s/W7BhLTuVniy9XZOGPcXzP8c/b0ydlLg3rOuFst
cWYE9ekNBqjYExOIa9zXgNjB3IT7tVLZGnYyMEF9rvSzl5t+t2c9g7UgkHPj
sZ4bIbuKvVzntTNdP5izxkQv+8V6xu63cuNKs9tbD5xp/rk9DpRmu26BCJ01
ux2tNXuYm7OLvD41HozM+Lk1uTnrlu2W2Q7utWk9N5hdLlq5u0Yj168BOq+1
fL+sGOVq4fnefmpnDbtb0S9JsGb2lHjffQ3q21rxuWRP6sCnWqm3rU9quV63
mu239Cx8AjZWevl6S8/UJzqxqmdfur23uosDvM4uXzuTxttrplzUM3cPve74
c3N7V+1157OGM54/Zu7OlNdt47GRbWRh/GJnW9c6ufnEnDZKnc5DoV+pFbvd
TqbfHmd6oEydWcfp528KzbKbr6PUZst5pVkurPvlxhSoXWy+Gc5LK2MNm0wG
BrPOBoTG1p3GUJ91ZtXJ/BzZ3bdALjbV9WPubqw0ZzDD1gBOrO/as3WncWff
aZ12pju1Ne3uNdO2OzmtbTe6TuepnrtYNzL9p16n8dpu9YuPuaCgIDVbTqOs
OzdZvVPOdSv9jZYZFY2sXW5uG7bZuinW74xNa9rZDBxB5FGmXW4UepOOpjRz
2UKt22m383c5wLDf2I6d2hZoX+o8gi2+fcwUnUZ7XOm0Gk5va2f0tr7SckZV
y4GUbEESW/dzr3Nv5I23hwet1O8/t+/GfXve17u1jWlfb/Rye6OXGg2kDXCp
3C89lOpv9dta2X5pdzt1pTMr3r3Ognq9UwYuTHOD9kO15Rj5XushY9rjur4J
aka+0+9lLjuGfePpjn3fntyM22W90NraC6XZud4OKg/5+jT43G7duY1Ktqlt
+2ev23GhNptP+9vMZdXOMKtVaaOIT7TK3XzA5UUBc0VKATqBhmT8ludsAvVl
rHMtskyVu61GZq8/aeRvXlq5HtjH9URp34OVaRuI26SRK9YamUahbdey2sTY
GtNMpvd2s6pNR5lat1FutNdBbVo/A/K1u63rzWDWsEEO+m/azF4YlWyjttVz
ze661ylf3uiT2tp8m/dNp86Fax0KUdWqg/VugP3IgC50y+t6qzN9bj1Y/QmY
ki3qRXnbm1XzvUkvV2u9gpUAVSJrHar6U3sWOD3bzSltMBCD2bhTn9QfWl1/
1cjZnb4NxiXTaBv5vt3t2pl+584zMobddO5K9fbDGTCs+1x5aPScG1vp38GD
HeOxfT9eG1N31banhXplnB+0QL1BYfrbm6o+vQOvZTwZyBEna4A8ZLRu1kZ7
qZDBzGYv30CB+m/jDCjMwuiufXgo13+rArjV9dPkGoVopc8uZ0B5GznTLWdr
yB2F2HN3Cf7AWIYOpDTXn7JgB/NG/snRt08zMHvwvTa5XtU6aBMbYD/HwaDS
WSi9TX2rVWC4VtUavmVOW8b9rVttN/uT3Bby/8fReblQOLnolP+cPXw+a1Wy
z+7Lyuk1/T/Hm/Zg8abMvKeH+WJ6UWkUe55jmM8L/aXdu169rO+DP4dnFw/V
181dy8poo+fLzsPEyTbOXyb5h+CsW7mc90AXnOLT/UkpO9PWpWy2v14P9J55
P/D9wMg1N7lFTcvfGHP4WjFeNrPmTD+rrHvFxYP7lDkpLlfun0rePincDPJP
ty1rse696LNt8FgdlDa5cXn0kL9fZx8L93eZ5v3IyVed+ecbc5kfz3LNpxWY
uOLNbU3xNqub6/F9r3z2XClntOeHs2lwXWy/ZCbV6v1QW11a2VXVegjuW1pl
sQw23ebTtKj749nCubyfGlNl2mhdnxcH28XnTHVjZD6PM+cZ7/qiMjFP/EJr
VVhvg2D0CIA0p8vNhVO8+7zcdg2/v9Tt20pu1lN6l15tPf7z/CxzXn/T19rk
+qWwKT27j3W/6Mwu8+ftJzOzvK1faOfdlne3ALWceJvz+/G2USvcFq+Vz+tB
6fnm7eVp49a8wmen8NR4uL1fP5tP/TM3vxgtS8/PXX8zmeZN29rcrEqLi88P
9+ft2cbSn9YlXbn1MuP245/TZaP8eVLK9Vl4WuLhH7aCsvNJrqJW3KMp5oJH
z6ZT/bWQLzyMB8thyQmGnb9/uvCe15XzO8B2oj12HrTO5+rdzZs77oyvzeLw
8UJz3GUUFGebZxcX3vnjQLN/HS7n2n12cmENRsXc680m+/L6t79RUI8RNkyH
Z43QV80ewddGs5jNHYlwWoaXbQKQ4cW2TpV3DV99+sRj2lPdnX0SPy6YZWNj
4i2exP5iHyJYPDPJcfDHZ3zzEw9XXY8/rwX4fPYsky8ULwq5LF3FJlscpWBk
85dnw+xweJ67GBYyRjFXyOQHZ1m9eF4oXJyxMZJ7Q0WSQW1o8O33MOmgPA+u
YCojspWwLyL2JK/KIRDPj3LPcMoIvDSpRi3x0h2soEqks4zTHZL4y+AT26x5
wvagfdrNKQP/ZD611p8yWZEgfY1qR2FzkSrnV9F6Mc6/0c2XzlN1a+jzx8vz
au95fFcdZp3N+eX9rHo7aHa2VbNfH1hb99yrVFd7MvH7ej2zfas2N4+Vye3S
cZ1n7bUyfPr0kl+WgpuLi81js2u+jbjgcTgsJjyWcXKev7y41M+GeuYsD/9o
g6J5XswPs5nhOTD07DzWnD2IgL9xXzqF7u31pX9d1caTx+y9Nhnera1fr7e3
hYdKazHMX3Yh3p3o29Jtu7FOh97QL3tmYN4H+rrSMUej+fr+4bz4SX89v69n
jZIB+l1dIeyCwjJ9Y80+cTrzK7+rR9lfNe3BDEbnnmmXG3a71Ctb7UK/2h+3
Co320qq+9heP5262cveotV5ezza/pkE6XX96qQclb774/Hr2NvSm95erXumx
YG4ym0LXq5c9ZxWjcPTnaFx4Ka0Hxf7jbJ01W83Py86yV7kY5fN+pviwXd38
Wh+V7+/ahZF+GXyuZKaj+1QIhhDOuE/baWu1WnjV8Vnv8lob9nuf9dz2JTcv
5+aF130QlIzcbdG/yVSfX81axynfTGvF18vu5dns5r6+gnAw2L7V/F+fVoue
/txevky9NAg2lUZGe6lcPF861Ze8PVidPU5es+PSrDE9295erHMTAzkl109Z
IUG9Sm5w2WFl1OeWVHnRWSbLYSiEd3pl/vw8vLBs/SXIZSuAqF5xniqlNZjS
ybm/rBW0+Tx3XwBZKj/NcrdbPQUzs9XL5MDbPwy7E8sJZq/5c0jo3lrP114+
u9n2tn5MAtOg+wl/nNg/yWa1bLFoXOYGw2LxHNQnmx8MzgdnZ9nC+bk+NFKR
eGxMR4P+2csnZ9w+y1dr00zFag/bn0qt1dLsWYH5Ol1VzIfPt8WbbaveuRi8
DlKQmJtGq7XoPrysPy8fMo3eRWG8mp2bvU+jzL13/WyOHlcSEpKhCjuqiPJs
TSK8v2tbqdMbwcZf6+OXRPs0Xn6rPYnLUQu0ZG1Xq9XpKk8bW3KZTPZTpvBp
PbPB+P7kjzVyf1FF6f8C4/7mHyOrAAA=

-->

</rfc>

